"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[568],{8115:(s,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=t(4848),r=t(8453);const o={sidebar_position:7},i="Assertion Groups",a={id:"tutorial-assertions/assertion-groups",title:"Assertion Groups",description:"Mixing 'Or' & 'And' conditions within Assert.That(...) statements may result in unexpected logic.",source:"@site/docs/tutorial-assertions/assertion-groups.md",sourceDirName:"tutorial-assertions",slug:"/tutorial-assertions/assertion-groups",permalink:"/TUnit/docs/tutorial-assertions/assertion-groups",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Delegates",permalink:"/TUnit/docs/tutorial-assertions/delegates"},next:{title:"Congratulations",permalink:"/TUnit/docs/tutorial-assertions/congratulations"}},c={},l=[];function u(s){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...s.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.header,{children:(0,n.jsx)(e.h1,{id:"assertion-groups",children:"Assertion Groups"})}),"\n",(0,n.jsxs)(e.p,{children:["Mixing 'Or' & 'And' conditions within ",(0,n.jsx)(e.code,{children:"Assert.That(...)"})," statements may result in unexpected logic."]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-csharp",children:"var value = \"CD\";\n\nawait Assert.That(value)\n    .Contains('C').And.Contains('D')\n    .Or\n    .Contains('A').And.Contains('B');\n"})}),"\n",(0,n.jsxs)(e.p,{children:["It might look like ",(0,n.jsx)(e.code,{children:"(C && D) || (A && B)"})," but it's actually ",(0,n.jsx)(e.code,{children:"C && (D || A) && B"})]}),"\n",(0,n.jsx)(e.p,{children:"Instead, if you want to combine complex assertion logic into a single assertion, assertion groups can be used to more clearly show a group of logic."}),"\n",(0,n.jsx)(e.p,{children:"For example:"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-csharp",children:"var value = \"CD\";\n\nvar cd = AssertionGroup.For(value)\n    .WithAssertion(assert => assert.Contains('C'))\n    .And(assert => assert.Contains('D'));\n\nvar ab = AssertionGroup.ForSameValueAs(cd)\n    .WithAssertion(assert => assert.Contains('A'))\n    .And(assert => assert.Contains('B'));\n\nawait AssertionGroup.Assert(cd).Or(ab);\n"})}),"\n",(0,n.jsx)(e.p,{children:"While more verbose, it's clearer how the logic will evaluate."})]})}function d(s={}){const{wrapper:e}={...(0,r.R)(),...s.components};return e?(0,n.jsx)(e,{...s,children:(0,n.jsx)(u,{...s})}):u(s)}},8453:(s,e,t)=>{t.d(e,{R:()=>i,x:()=>a});var n=t(6540);const r={},o=n.createContext(r);function i(s){const e=n.useContext(o);return n.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function a(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(r):s.components||r:i(s.components),n.createElement(o.Provider,{value:e},s.children)}}}]);